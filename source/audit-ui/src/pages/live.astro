---
import Layout from '../layouts/Layout.astro';
import RuleStatsChart from '../components/RuleStatsChart';
---

<Layout title="Live Traffic - DekkhoIsho Audit">
	<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
		<div class="w-full mb-1">
			<div class="mb-4">
				<h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">
					Live Traffic Monitoring
				</h1>
			</div>
		</div>
	</div>

	<!-- Status Bar -->
	<div class="p-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
		<div class="sm:flex sm:items-center sm:justify-between">
			<div class="flex items-center space-x-4">
				<div class="flex items-center">
					<span id="status-dot" class="flex relative w-3 h-3 mr-3">
						<span class="absolute inline-flex w-full h-full bg-gray-400 rounded-full opacity-75 animate-ping"></span>
						<span class="relative inline-flex w-3 h-3 bg-gray-500 rounded-full"></span>
					</span>
					<span id="connection-status" class="text-sm font-medium text-gray-900 dark:text-white">Connecting...</span>
				</div>
			</div>
			<div class="flex items-center mt-4 space-x-6 sm:mt-0">
				<div>
					<span class="text-xs text-gray-500 dark:text-gray-400">Events</span>
					<p id="event-counter" class="text-xl font-bold text-gray-900 dark:text-white">0</p>
				</div>
				<div>
					<span class="text-xs text-gray-500 dark:text-gray-400">Rate</span>
					<p id="event-rate" class="text-xl font-bold text-gray-900 dark:text-white">0/min</p>
				</div>
			</div>
		</div>
		</div>
		
	<!-- Chart -->
	<div class="p-4 bg-white dark:bg-gray-800">
		<div class="p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
			<div class="flex items-center justify-between mb-4">
				<div>
					<h3 class="text-lg font-semibold text-gray-900 dark:text-white">Top 5 Security Rules</h3>
					<p class="text-sm text-gray-500 dark:text-gray-400">Last 15 minutes</p>
				</div>
			</div>
			<div id="chart-container">
				<RuleStatsChart 
					client:load
					apiUrl={import.meta.env.PUBLIC_API_URL || 'http://localhost:5001'}
				/>
			</div>
		</div>
	</div>

	<!-- Live Events Table -->
	<div class="p-4 bg-white block border-gray-200 dark:bg-gray-800 dark:border-gray-700">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-lg font-semibold text-gray-900 dark:text-white">Live Event Stream</h2>
			<button id="pause-btn" type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
				<svg id="pause-icon" class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
				</svg>
				<span id="pause-text">Pause</span>
			</button>
		</div>
	</div>

	<!-- Events Table -->
	<div class="flex flex-col">
		<div class="overflow-x-auto">
			<div class="inline-block min-w-full align-middle">
				<div class="overflow-hidden shadow">
					<table class="min-w-full divide-y divide-gray-200 table-fixed dark:divide-gray-600">
						<thead class="bg-gray-100 dark:bg-gray-700">
							<tr>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Time
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Source IP
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Rule
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Severity
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Action
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Latency
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Country
								</th>
						</tr>
					</thead>
						<tbody id="events-tbody" class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
						<tr>
								<td colspan="7" class="p-4 text-center text-gray-500 dark:text-gray-400">
									Waiting for events...
								</td>
						</tr>
					</tbody>
				</table>
			</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	import { isAuthenticated } from '../utils/auth';
	import { connectWebSocket } from '../utils/websocket';
	import { api } from '../utils/api';
	import { showToast } from '../utils/toast';

	// Check authentication immediately
	if (!isAuthenticated()) {
		window.location.replace('/login');
		throw new Error('Not authenticated'); // Stop execution
	}

	let eventCount = 0;
	let eventTimes: number[] = [];
	let isPaused = false;

	const maxEventsDisplay = 100; // Keep last 100 events in table

	// Update connection status
	function updateConnectionStatus(status: 'connecting' | 'connected' | 'disconnected') {
		const dot = document.getElementById('status-dot');
		const text = document.getElementById('connection-status');
		
		if (status === 'connected') {
			if (dot) {
				dot.innerHTML = `
					<span class="absolute inline-flex w-full h-full bg-green-400 rounded-full opacity-75 animate-ping"></span>
					<span class="relative inline-flex w-3 h-3 bg-green-500 rounded-full"></span>
				`;
			}
			if (text) text.textContent = 'Connected';
			if (text) text.className = 'text-sm font-medium text-green-600 dark:text-green-400';
		} else if (status === 'disconnected') {
			if (dot) {
				dot.innerHTML = `<span class="relative inline-flex w-3 h-3 bg-red-500 rounded-full"></span>`;
			}
			if (text) text.textContent = 'Disconnected';
			if (text) text.className = 'text-sm font-medium text-red-600 dark:text-red-400';
		} else {
			if (dot) {
				dot.innerHTML = `
					<span class="absolute inline-flex w-full h-full bg-gray-400 rounded-full opacity-75 animate-ping"></span>
					<span class="relative inline-flex w-3 h-3 bg-gray-500 rounded-full"></span>
				`;
			}
			if (text) text.textContent = 'Connecting...';
			if (text) text.className = 'text-sm font-medium text-gray-900 dark:text-white';
		}
	}

	// Handle incoming event
	function handleEvent(event: any) {
		if (isPaused) return;

		eventCount++;
		eventTimes.push(Date.now());
		
		// Update counters
		const counter = document.getElementById('event-counter');
		if (counter) counter.textContent = eventCount.toString();
		
		// Calculate rate (events per minute)
		const oneMinuteAgo = Date.now() - 60000;
		eventTimes = eventTimes.filter(t => t > oneMinuteAgo);
		const rate = document.getElementById('event-rate');
		if (rate) rate.textContent = `${eventTimes.length}/min`;

		// Add to table
		const tbody = document.getElementById('events-tbody');
		if (tbody) {
			// Remove waiting message if present
			if (tbody.children.length === 1 && tbody.children[0].textContent?.includes('Waiting')) {
				tbody.innerHTML = '';
			}

			const time = new Date(event.ts || Date.now()).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' });

			// Severity colors
			const severityColors: any = {
				low: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
				medium: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
				high: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300',
				critical: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
			};

			// Action colors
			const actionColors: any = {
				allowed: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
				blocked: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
			};

			const row = document.createElement('tr');
			row.className = 'hover:bg-gray-100 dark:hover:bg-gray-700 animate-fade-in';
			row.innerHTML = `
				<td class="p-4 text-sm font-medium text-gray-900 whitespace-nowrap dark:text-white">
					${time}
				</td>
				<td class="p-4 text-sm text-gray-900 whitespace-nowrap dark:text-white">
					<code class="text-xs font-mono bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">${event.sourceIp || event.source_ip}</code>
				</td>
				<td class="max-w-xs p-4 overflow-hidden text-sm text-gray-500 truncate dark:text-gray-400">
					${event.ruleName || event.rule_name}
				</td>
				<td class="p-4 whitespace-nowrap">
					<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${severityColors[event.severity.toLowerCase()]}">
						${event.severity}
					</span>
				</td>
				<td class="p-4 whitespace-nowrap">
					<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${actionColors[event.action]}">
						${event.action}
					</span>
				</td>
				<td class="p-4 text-sm text-gray-900 whitespace-nowrap dark:text-white">
					${event.latencyMs || event.latency_ms}ms
				</td>
				<td class="p-4 text-sm text-gray-900 whitespace-nowrap dark:text-white">
					${event.country || event.countryCode}
				</td>
			`;

			tbody.insertBefore(row, tbody.firstChild);

			// Keep only last N events
			while (tbody.children.length > maxEventsDisplay) {
				tbody.removeChild(tbody.lastChild!);
			}
		}
	}

	// WebSocket connection
	const ws = connectWebSocket((event) => {
		handleEvent(event);
	});

	ws.onopen = () => {
		updateConnectionStatus('connected');
		showToast({ message: 'Connected to live event stream', type: 'success' });
	};

	ws.onerror = () => {
		updateConnectionStatus('disconnected');
		showToast({ message: 'WebSocket connection error', type: 'error' });
	};

	ws.onclose = (event) => {
		updateConnectionStatus('disconnected');
		if (event.code === 1008 || event.code === 4001) {
			console.warn('WebSocket authentication failed');
			showToast({ message: 'WebSocket authentication failed', type: 'error' });
			return;
		}
		showToast({ message: 'Disconnected from live stream. Reconnecting...', type: 'warning' });
		setTimeout(() => window.location.reload(), 5000);
	};

	// Pause/Resume button
	const pauseBtn = document.getElementById('pause-btn');
	const pauseText = document.getElementById('pause-text');
	const pauseIcon = document.getElementById('pause-icon');
	
	pauseBtn?.addEventListener('click', () => {
		isPaused = !isPaused;
		if (pauseText) pauseText.textContent = isPaused ? 'Resume' : 'Pause';
		if (pauseIcon && isPaused) {
			pauseIcon.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>';
		} else if (pauseIcon) {
			pauseIcon.innerHTML = '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>';
		}
	});

	// Cleanup on page unload
	window.addEventListener('beforeunload', () => {
		ws.close();
	});
</script>

<style>
	@keyframes fade-in {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
	.animate-fade-in {
		animation: fade-in 0.3s ease-out;
	}
</style>
