---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Rules Management - Bitsmedia Audit">
	<div class="rules-page">
		<div class="header">
			<h1>Security Rules</h1>
			<button id="draft-rule-btn" class="btn-primary">Draft New Rule</button>
		</div>
		
		<div class="filters">
			<select id="status-filter">
				<option value="">All Status</option>
				<option value="draft">Draft</option>
				<option value="active">Active</option>
				<option value="paused">Paused</option>
			</select>
		</div>
		
		<div class="rules-grid" id="rules-grid">
			<div class="loading-state">Loading rules...</div>
		</div>
	</div>
	
	<!-- Draft Rule Modal -->
	<div id="draft-modal" class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h2>Draft New Rule</h2>
				<button class="close-btn" id="close-modal">&times;</button>
			</div>
			<form id="draft-form">
				<div class="form-group">
					<label for="rule-name">Rule Name *</label>
					<input type="text" id="rule-name" required placeholder="e.g., SQL Injection Detection" />
				</div>
				<div class="form-group">
					<label for="rule-description">Description</label>
					<textarea id="rule-description" rows="3" placeholder="Describe what this rule detects"></textarea>
				</div>
				<div class="form-group">
					<label for="rule-pattern">Detection Pattern</label>
					<input type="text" id="rule-pattern" placeholder="e.g., regex or pattern" />
				</div>
				<div class="form-group">
					<label for="rule-severity">Severity *</label>
					<select id="rule-severity" required>
						<option value="">Select severity</option>
						<option value="low">Low</option>
						<option value="medium">Medium</option>
						<option value="high">High</option>
						<option value="critical">Critical</option>
					</select>
				</div>
				<div class="modal-actions">
					<button type="button" class="btn-secondary" id="cancel-btn">Cancel</button>
					<button type="submit" class="btn-primary">Create Draft</button>
				</div>
			</form>
		</div>
	</div>
</Layout>

<style>
	.rules-page {
		max-width: 1400px;
		margin: 0 auto;
	}
	.header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
	}
	h1 {
		color: #1a1a2e;
		font-size: 2.5rem;
	}
	.btn-primary {
		background: #4ecca3;
		color: #1a1a2e;
		border: none;
		padding: 0.75rem 1.5rem;
		border-radius: 6px;
		font-size: 0.95rem;
		font-weight: 600;
		cursor: pointer;
	}
	.btn-primary:hover {
		background: #45b393;
	}
	.filters {
		margin-bottom: 2rem;
	}
	.filters select {
		padding: 0.75rem;
		border: 2px solid #e0e0e0;
		border-radius: 6px;
		font-size: 0.95rem;
	}
	.rules-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: 1.5rem;
	}
	.rule-card {
		background: white;
		padding: 1.5rem;
		border-radius: 8px;
		box-shadow: 0 2px 8px rgba(0,0,0,0.1);
		border-left: 4px solid #4ecca3;
	}
	.rule-card.draft { border-left-color: #95a5a6; }
	.rule-card.active { border-left-color: #2ecc71; }
	.rule-card.paused { border-left-color: #e74c3c; }
	.rule-header {
		display: flex;
		justify-content: space-between;
		align-items: start;
		margin-bottom: 1rem;
	}
	.rule-title {
		font-size: 1.1rem;
		font-weight: 600;
		color: #1a1a2e;
		margin-bottom: 0.5rem;
	}
	.status-badge {
		padding: 0.25rem 0.75rem;
		border-radius: 12px;
		font-size: 0.75rem;
		font-weight: 600;
		text-transform: uppercase;
	}
	.status-draft { background: #ecf0f1; color: #7f8c8d; }
	.status-active { background: #d5f4e6; color: #0a6e5c; }
	.status-paused { background: #fdecea; color: #c0392b; }
	.rule-description {
		color: #666;
		font-size: 0.9rem;
		margin-bottom: 1rem;
		line-height: 1.5;
	}
	.rule-meta {
		display: flex;
		gap: 1rem;
		font-size: 0.85rem;
		color: #999;
		margin-bottom: 1rem;
	}
	.rule-actions {
		display: flex;
		gap: 0.5rem;
	}
	.rule-actions button {
		flex: 1;
		padding: 0.5rem;
		border: none;
		border-radius: 4px;
		font-size: 0.85rem;
		cursor: pointer;
		font-weight: 500;
	}
	.btn-approve {
		background: #2ecc71;
		color: white;
	}
	.btn-pause {
		background: #e74c3c;
		color: white;
	}
	.btn-resume {
		background: #3498db;
		color: white;
	}
	.btn-secondary {
		background: #e0e0e0;
		color: #333;
	}
	.loading-state {
		grid-column: 1 / -1;
		text-align: center;
		padding: 3rem;
		color: #999;
	}
	
	/* Modal */
	.modal {
		display: none;
		position: fixed;
		z-index: 1000;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.5);
		align-items: center;
		justify-content: center;
	}
	.modal.active {
		display: flex;
	}
	.modal-content {
		background: white;
		padding: 2rem;
		border-radius: 12px;
		width: 90%;
		max-width: 600px;
		max-height: 90vh;
		overflow-y: auto;
	}
	.modal-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1.5rem;
	}
	.modal-header h2 {
		color: #1a1a2e;
		font-size: 1.5rem;
	}
	.close-btn {
		background: none;
		border: none;
		font-size: 2rem;
		color: #999;
		cursor: pointer;
		line-height: 1;
	}
	.close-btn:hover {
		color: #333;
	}
	.form-group {
		margin-bottom: 1.5rem;
	}
	.form-group label {
		display: block;
		margin-bottom: 0.5rem;
		color: #333;
		font-weight: 500;
	}
	.form-group input,
	.form-group textarea,
	.form-group select {
		width: 100%;
		padding: 0.75rem;
		border: 2px solid #e0e0e0;
		border-radius: 6px;
		font-size: 1rem;
	}
	.form-group input:focus,
	.form-group textarea:focus,
	.form-group select:focus {
		outline: none;
		border-color: #4ecca3;
	}
	.modal-actions {
		display: flex;
		gap: 1rem;
		justify-content: flex-end;
		margin-top: 2rem;
	}
	.modal-actions button {
		padding: 0.75rem 1.5rem;
		border: none;
		border-radius: 6px;
		font-size: 0.95rem;
		font-weight: 500;
		cursor: pointer;
	}
</style>

<script>
	import { isAuthenticated, getUser, hasRole } from '../utils/auth';
	import { api } from '../utils/api';

	// Check authentication
	if (!isAuthenticated()) {
		window.location.href = '/login';
	}

	// Check if user can access this page
	const user = getUser();
	if (!hasRole('analyst')) {
		alert('You do not have permission to access this page.');
		window.location.href = '/';
	}

	const isAdmin = user?.role === 'admin';

	// Load rules
	async function loadRules() {
		const grid = document.getElementById('rules-grid');
		const statusFilter = (document.getElementById('status-filter') as HTMLSelectElement).value;
		
		if (grid) grid.innerHTML = '<div class="loading-state">Loading rules...</div>';
		
		try {
			const params = new URLSearchParams();
			if (statusFilter) params.append('status', statusFilter);
			
			const response = await api.get(`/rules?${params.toString()}`);
			const rules = response.data.rules || [];
			
			if (grid) {
				if (rules.length === 0) {
					grid.innerHTML = '<div class="loading-state">No rules found</div>';
				} else {
					grid.innerHTML = rules.map((rule: any) => `
						<div class="rule-card ${rule.status}">
							<div class="rule-header">
								<div>
									<div class="rule-title">${rule.name}</div>
									<span class="status-badge status-${rule.status}">${rule.status}</span>
								</div>
							</div>
							${rule.description ? `<div class="rule-description">${rule.description}</div>` : ''}
							<div class="rule-meta">
								<span>Severity: ${rule.severity.toUpperCase()}</span>
								<span>|</span>
								<span>Created: ${new Date(rule.created_at).toLocaleDateString()}</span>
							</div>
							${isAdmin && rule.status !== 'draft' ? `
								<div class="rule-actions">
									${rule.status === 'active' ? 
										`<button class="btn-pause" onclick="pauseRule(${rule.id})">Pause</button>` : 
										`<button class="btn-resume" onclick="resumeRule(${rule.id})">Resume</button>`
									}
								</div>
							` : ''}
							${isAdmin && rule.status === 'draft' ? `
								<div class="rule-actions">
									<button class="btn-approve" onclick="approveRule(${rule.id})">Approve</button>
								</div>
							` : ''}
						</div>
					`).join('');
				}
			}
		} catch (error) {
			console.error('Failed to load rules:', error);
			if (grid) grid.innerHTML = '<div class="loading-state">Failed to load rules</div>';
		}
	}

	// Modal handlers
	const modal = document.getElementById('draft-modal');
	const draftBtn = document.getElementById('draft-rule-btn');
	const closeBtn = document.getElementById('close-modal');
	const cancelBtn = document.getElementById('cancel-btn');
	const draftForm = document.getElementById('draft-form') as HTMLFormElement;

	draftBtn?.addEventListener('click', () => {
		modal?.classList.add('active');
	});

	closeBtn?.addEventListener('click', () => {
		modal?.classList.remove('active');
		draftForm?.reset();
	});

	cancelBtn?.addEventListener('click', () => {
		modal?.classList.remove('active');
		draftForm?.reset();
	});

	// Draft new rule
	draftForm?.addEventListener('submit', async (e) => {
		e.preventDefault();
		
		const formData = new FormData(draftForm);
		const data = {
			name: formData.get('rule-name') as string,
			description: formData.get('rule-description') as string,
			pattern: formData.get('rule-pattern') as string,
			severity: formData.get('rule-severity') as string
		};
		
		try {
			await api.post('/rules/draft', data);
			modal?.classList.remove('active');
			draftForm.reset();
			loadRules();
			alert('Rule drafted successfully!');
		} catch (error: any) {
			alert('Failed to draft rule: ' + (error.response?.data?.error || error.message));
		}
	});

	// Global functions for rule actions
	(window as any).approveRule = async (id: number) => {
		if (!confirm('Approve this rule?')) return;
		try {
			await api.post(`/rules/${id}/approve`);
			loadRules();
			alert('Rule approved successfully!');
		} catch (error: any) {
			alert('Failed to approve rule: ' + (error.response?.data?.error || error.message));
		}
	};

	(window as any).pauseRule = async (id: number) => {
		const reason = prompt('Reason for pausing (optional):');
		try {
			await api.post(`/rules/${id}/pause`, { reason: reason || undefined });
			loadRules();
			alert('Rule paused successfully!');
		} catch (error: any) {
			alert('Failed to pause rule: ' + (error.response?.data?.error || error.message));
		}
	};

	(window as any).resumeRule = async (id: number) => {
		if (!confirm('Resume this rule?')) return;
		try {
			await api.post(`/rules/${id}/resume`);
			loadRules();
			alert('Rule resumed successfully!');
		} catch (error: any) {
			alert('Failed to resume rule: ' + (error.response?.data?.error || error.message));
		}
	};

	// Filter change
	document.getElementById('status-filter')?.addEventListener('change', loadRules);

	// Hide draft button if viewer (shouldn't reach here but as a safeguard)
	if (!hasRole('analyst')) {
		if (draftBtn) draftBtn.style.display = 'none';
	}

	// Initial load
	loadRules();
</script>

