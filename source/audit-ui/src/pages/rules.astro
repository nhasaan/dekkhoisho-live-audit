---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Rules Management - DekkhoIsho Audit">
	<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
		<div class="w-full mb-1">
			<div class="mb-4">
				<h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">
					Security Rules
				</h1>
			</div>
			<div class="sm:flex">
				<div class="items-center hidden mb-3 sm:flex sm:divide-x sm:divide-gray-100 sm:mb-0 dark:divide-gray-700">
					<form class="lg:pr-3" action="#" method="GET">
						<label for="status-filter" class="sr-only">Filter by status</label>
						<select 
							id="status-filter" 
							class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
						>
							<option value="">All Status</option>
							<option value="draft">Draft</option>
							<option value="active">Active</option>
							<option value="paused">Paused</option>
						</select>
					</form>
				</div>
				<div class="flex items-center ml-auto space-x-2 sm:space-x-3">
					<button
						onclick="window.location.href='/rules-form'"
						type="button"
						class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
					>
						<svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
							<path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
						</svg>
						Add Rule
					</button>
				</div>
			</div>
		</div>
	</div>

	<div class="flex flex-col">
		<div class="overflow-x-auto">
			<div class="inline-block min-w-full align-middle">
				<div class="overflow-hidden shadow">
					<table class="min-w-full divide-y divide-gray-200 table-fixed dark:divide-gray-600">
						<thead class="bg-gray-100 dark:bg-gray-700">
							<tr>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Rule Name
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Description
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Severity
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Status
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Created
								</th>
								<th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase dark:text-gray-400">
									Actions
								</th>
							</tr>
						</thead>
						<tbody id="rules-tbody" class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
							<tr>
								<td colspan="6" class="p-4 text-center text-gray-500 dark:text-gray-400">
									Loading rules...
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	import { isAuthenticated, getUser, hasRole } from '../utils/auth';
	import { api } from '../utils/api';
	import { showToast } from '../utils/toast';

	// Check authentication
	if (!isAuthenticated()) {
		window.location.replace('/login');
		throw new Error('Not authenticated');
	}

	// Check if user can access this page
	const user = getUser();
	if (!hasRole('analyst')) {
		showToast({ message: 'You do not have permission to access this page', type: 'error' });
		window.location.replace('/');
		throw new Error('Unauthorized');
	}

	const isAdmin = user?.role === 'admin';

	// Load rules
	async function loadRules() {
		const tbody = document.getElementById('rules-tbody');
		const statusFilter = (document.getElementById('status-filter') as HTMLSelectElement).value;
		
		if (tbody) tbody.innerHTML = '<tr><td colspan="6" class="p-4 text-center text-gray-500 dark:text-gray-400">Loading rules...</td></tr>';
		
		try {
			const params = new URLSearchParams();
			if (statusFilter) params.append('status', statusFilter);
			
			const response = await api.get(`/rules?${params.toString()}`);
			const rules = response.data.data || [];
			
			if (tbody) {
				if (rules.length === 0) {
					tbody.innerHTML = '<tr><td colspan="6" class="p-4 text-center text-gray-500 dark:text-gray-400">No rules found</td></tr>';
				} else {
					tbody.innerHTML = rules.map((rule: any) => {
						const createdDate = new Date(rule.created_at).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
						const description = rule.description || '-';
						const truncatedDesc = description.length > 60 ? description.substring(0, 60) + '...' : description;
						
						// Severity badge colors
						const severityColors: any = {
							low: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
							medium: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
							high: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300',
							critical: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
						};
						
						// Status badge colors
						const statusColors: any = {
							draft: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
							active: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
							paused: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
						};
						
						// Build actions based on status and role
						let actions = '';
						
						// Edit button for drafts
						if (rule.status === 'draft') {
							actions += `
								<button onclick="editRule(${rule.id})" type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
									<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
										<path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"></path>
										<path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd"></path>
									</svg>
									Edit
								</button>
							`;
						}
						
						// Admin actions
						if (isAdmin) {
							// Approve button for drafts
							if (rule.status === 'draft') {
								actions += `
									<button onclick="approveRule(${rule.id})" type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-green-700 rounded-lg hover:bg-green-800 focus:ring-4 focus:ring-green-300 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
										<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
											<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
										</svg>
										Approve
									</button>
								`;
							}
							
							// Activate/Deactivate buttons for active/paused rules
							if (rule.status === 'active') {
								actions += `
									<button onclick="pauseRule(${rule.id})" type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-red-700 rounded-lg hover:bg-red-800 focus:ring-4 focus:ring-red-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">
										<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
											<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd"></path>
										</svg>
										Deactivate
									</button>
								`;
							} else if (rule.status === 'paused') {
								actions += `
									<button onclick="resumeRule(${rule.id})" type="button" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
										<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
											<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
										</svg>
										Activate
									</button>
								`;
							}
						}
						
						if (!actions) {
							actions = '<span class="text-gray-500 text-sm dark:text-gray-400">No actions</span>';
						}
						
						return `
							<tr class="hover:bg-gray-100 dark:hover:bg-gray-700">
								<td class="p-4 text-base font-semibold text-gray-900 whitespace-nowrap dark:text-white">
									${rule.name}
								</td>
								<td class="max-w-sm p-4 overflow-hidden text-base font-normal text-gray-500 truncate dark:text-gray-400" title="${description}">
									${truncatedDesc}
								</td>
								<td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white">
									<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${severityColors[rule.severity.toLowerCase()]}">
										${rule.severity.charAt(0).toUpperCase() + rule.severity.slice(1)}
									</span>
								</td>
								<td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white">
									<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[rule.status]}">
										${rule.status.charAt(0).toUpperCase() + rule.status.slice(1)}
									</span>
								</td>
								<td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white">
									${createdDate}
								</td>
								<td class="p-4 space-x-2 whitespace-nowrap">
									${actions}
								</td>
							</tr>
						`;
					}).join('');
				}
			}
		} catch (error) {
			console.error('Failed to load rules:', error);
			showToast({ message: 'Failed to load rules', type: 'error' });
			if (tbody) tbody.innerHTML = '<tr><td colspan="6" class="p-4 text-center text-gray-500 dark:text-gray-400">Failed to load rules</td></tr>';
		}
	}

	// Global functions for rule actions
	(window as any).editRule = (id: number) => {
		window.location.href = `/rules-form?id=${id}`;
	};

	(window as any).approveRule = async (id: number) => {
		try {
			await api.post(`/rules/${id}/approve`);
			showToast({ message: 'Rule approved and activated successfully!', type: 'success' });
			loadRules();
		} catch (error: any) {
			showToast({ message: 'Failed to approve rule: ' + (error.response?.data?.error || error.message), type: 'error' });
		}
	};

	(window as any).pauseRule = async (id: number) => {
		try {
			await api.post(`/rules/${id}/pause`);
			showToast({ message: 'Rule deactivated successfully!', type: 'success' });
			loadRules();
		} catch (error: any) {
			showToast({ message: 'Failed to deactivate rule: ' + (error.response?.data?.error || error.message), type: 'error' });
		}
	};

	(window as any).resumeRule = async (id: number) => {
		try {
			await api.post(`/rules/${id}/resume`);
			showToast({ message: 'Rule activated successfully!', type: 'success' });
			loadRules();
		} catch (error: any) {
			showToast({ message: 'Failed to activate rule: ' + (error.response?.data?.error || error.message), type: 'error' });
		}
	};

	// Filter change
	document.getElementById('status-filter')?.addEventListener('change', loadRules);

	// Initial load
	loadRules();
</script>
